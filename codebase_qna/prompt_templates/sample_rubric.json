{
  "title": "Rubric for Splitting Server-Specific and Shared Utilities in entityPermissionUtils",
  "criteria": [
    {
      "name": "Correct File Renaming and Creation",
      "description": "Evaluates whether the answer accurately identifies the need to rename `entityPermissionUtils.ts` to `entityPermissionUtils.server.ts` and to create `entityPermissionUtils.shared.ts`.",
      "levels": [
        "0: No mention of renaming or creating new files",
        "1: Vague mention of splitting files without names",
        "2: Mentions new file names but omits renaming",
        "3: Mentions both renaming and creation but misses purpose of split",
        "4: Correctly identifies renaming and creation of both `.server.ts` and `.shared.ts`, with purpose"
      ]
    },
    {
      "name": "Identification of Shared Utility (`areTheySiblingEntities`)",
      "description": "Evaluates whether the answer correctly identifies the exact function moved to the shared file.",
      "levels": [
        "0: No mention of shared functions",
        "1: Generic mention of moving 'some functions'",
        "2: Mentions functions but incorrect ones",
        "3: Mentions `areTheySiblingEntities` without file context",
        "4: Accurately identifies `areTheySiblingEntities` was moved to `entityPermissionUtils.shared.ts`"
      ]
    },
    {
      "name": "Awareness of Import Path Refactors",
      "description": "Evaluates whether the answer correctly specifies updated import paths for server and shared utilities across the codebase.",
      "levels": [
        "0: No mention of imports",
        "1: Mentions updating imports without paths",
        "2: Mentions paths but uses wrong module syntax",
        "3: Provides mostly correct import paths but minor errors",
        "4: Correctly states updated import paths: `@calcom/lib/entityPermissionUtils.server` and `.shared`"
      ]
    },
    {
      "name": "Selective Migration of Server Code",
      "description": "Evaluates whether the answer avoids overgeneralizing and respects which functions should remain server-only.",
      "levels": [
        "0: No distinction between shared and server code",
        "1: Suggests moving everything to shared",
        "2: Suggests split but vague on criteria",
        "3: Recognizes server-only logic should remain but lacks precision",
        "4: States shared functions should be logic-only, and server ones tied to DB or API calls"
      ]
    },
    {
      "name": "Codebase Familiarity (Bonus)",
      "description": "Evaluates whether the answer reflects specific knowledge of where these utils are used or tested (e.g., entityType.ts, org workflows).",
      "levels": [
        "0: No mention of usage context",
        "1: Mentions 'used elsewhere' with no details",
        "2: Suggests update to callers but not specific locations",
        "3: Mentions usage in `lib/entityType.ts` or related server modules",
        "4: Names exact call sites or test files touched by the PR"
      ]
    }
  ]
}
