{
    "rubric": {
      "title": "Quality of the answer to setting up Cal.com locally and understanding its development environment",
      "criteria": [
        {
          "name": "Node.js and Yarn Setup Understanding",
          "description": "Evaluates whether the answer correctly identifies the required versions and installation of Node.js and Yarn for running Cal.com.",
          "levels": [
            "0: No mention of Node.js or Yarn",
            "1: Incorrect or outdated versions referenced",
            "2: Identifies Node.js but omits Yarn or vice versa",
            "3: Correct versions mentioned, but lacks detail on usage",
            "4: Clearly explains both Node.js (>=18.x) and Yarn setup steps"
          ]
        },
        {
          "name": "Environment Variable Configuration",
          "description": "Assesses whether the answer properly explains how to duplicate .env.example and set required secrets using openssl.",
          "levels": [
            "0: No mention of environment variables",
            "1: Mentions .env but not how to create or populate it",
            "2: Mentions creation but lacks command usage",
            "3: Mentions command usage but misses one key (NEXTAUTH_SECRET or CALENDSO_ENCRYPTION_KEY)",
            "4: Fully accurate explanation of duplicating .env.example, using openssl to generate both secrets"
          ]
        },
        {
          "name": "Database Configuration and Migration",
          "description": "Evaluates understanding of setting up the Postgres database and running migrations using the Prisma schema.",
          "levels": [
            "0: No mention of database",
            "1: Mentions Postgres but not setup steps",
            "2: References setup but omits Prisma migrations",
            "3: Mentions local setup and partial migration steps",
            "4: Clearly explains local DB setup or use of Railway/Render, and the appropriate yarn workspace @calcom/prisma commands"
          ]
        },
        {
          "name": "Docker and Mailhog Integration",
          "description": "Assesses awareness of Docker requirements for running services like Mailhog and test Postgres containers.",
          "levels": [
            "0: No mention of Docker or Mailhog",
            "1: Mentions Docker but not its purpose",
            "2: Recognizes Mailhog but omits Docker usage",
            "3: Mentions Mailhog with partial setup steps",
            "4: Full explanation of why Docker is required and how to run Mailhog for email testing"
          ] 
        },
        {
          "name": "Understanding yarn dx and Dev Workflow",
          "description": "Assesses how well the answer explains yarn dx, including its Docker dependency and dev utility.",
          "levels": [
            "0: No mention of yarn dx",
            "1: Vaguely references it without purpose",
            "2: Recognizes it starts dev environment but lacks detail",
            "3: Explains it requires Docker and runs test users",
            "4: Clearly explains it starts local Postgres, logs credentials, and sets up full dev environment"
          ]
        }
      ]
    }
}
  